{"version":3,"file":"angular-panel-snap.min.js","sources":["module.js","menu.js","panel-group.js","panel.js","scroll.js"],"names":[],"mappings":"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","sourcesContent":["(function() {\n'use strict';\n\n/*\r\n * angular-panel-snap main module definition\r\n */\r\nangular.module('akreitals.panel-snap', []);\n\n})();\n\n","(function() {\n'use strict';\n\n/*\r\n * ak-panel-group-menu directive\r\n *\r\n * Creates a menu for the referenced ak-panel-group container\r\n *\r\n * @attribute for (required) String: name attribute of the ak-panel-group the menu is to reference\r\n */\r\nangular\r\n\t.module('akreitals.panel-snap')\r\n\t.directive('akPanelGroupMenu', akPanelGroupMenu);\r\n\r\n/* @ngInject */\r\nfunction akPanelGroupMenu ($rootScope, $log) {\r\n\treturn {\r\n\t\trestrict: 'EA',\r\n\t\ttemplate: '<ul class=\"ak-menu\"><li ng-repeat=\"panel in panels\" ng-class=\"{active: panel.active}\" ng-click=\"select(panel.id)\"><a href>{{panel.name}}</a></li></ul>',\r\n\t\tscope: {\r\n\t\t\tfor: '@'\r\n\t\t},\r\n\t\tlink: function (scope) {\r\n\t\t\tif (!angular.isDefined(scope.for)) {\r\n\t\t\t\t$log.error(\"PanelGroupMenu: no 'for' attribute provided\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tscope.panels = [];\r\n\r\n\t\t\t/*\r\n\t\t\t * listen for addedPanel event, if group name matches then add\r\n\t\t\t * it to the menu\r\n\t\t\t */\r\n\t\t\t$rootScope.$on('panelsnap:addedPanel', function (event, data) {\r\n\t\t\t\tif (scope.for === data.group) {\r\n\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\tvar panel = {\r\n\t\t\t\t\t\tid: data.id,\r\n\t\t\t\t\t\tname: data.name,\r\n\t\t\t\t\t\tactive: false\r\n\t\t\t\t\t};\r\n\t\t\t\t\tscope.panels.push(panel);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t/*\r\n\t\t\t * listen for activatePanel event, if group name matches then set\r\n\t\t\t * active flag target menu element\r\n\t\t\t */\r\n\t\t\t$rootScope.$on('panelsnap:activatePanel', function (event, data) {\r\n\t\t\t\tif (scope.for === data.group) {\r\n\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\tangular.forEach(scope.panels, function (panel) {\r\n\t\t\t\t\t\tpanel.active = false;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tscope.panels[data.id].active = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t/*\r\n\t\t\t * emit event to tell ak-panel-group directive to select the target panel\r\n\t\t\t */\r\n\t\t\tscope.select = function (id) {\r\n\t\t\t\t$rootScope.$emit('panelsnap:selectPanel', {group: scope.for, id: id});\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}\n\n})();\n\n","(function() {\n'use strict';\n\n/*\r\n * ak-panel-group directive\r\n *\r\n * Container for set of 'ak-panel' directives that maintains the panels state and all interactions with the group\r\n *\r\n * @attribute name (optional) String: name of the group, to be referenced in ak-panel-group-menu's 'for' attribute\r\n * @attribute speed (optional) Number: duration in milliseconds to snap to the desired panel, defaults to 400ms\r\n * @attribute threshold (optional) Number: amount of pixels required to scroll before snapping to the next panel, defults to 50px \r\n * @attribute fullWindow (optional) Boolean: true if the panels are to fill the full browser window\r\n * @attribute keyboard (optional) Boolean: true if key presses can be used to navigate panels\r\n * @attribute prevKey (optional) Number: keyCode of key to navigate to previous panel, defaults to 38 (up arrow)\r\n * @attribute nextKey (optional) Number: keyCode of key to navigate to next panel, defaults to 40 (down arrow)\r\n */\r\nangular\r\n\t.module('akreitals.panel-snap')\r\n\t.directive('akPanelGroup', akPanelGroup)\r\n\t.controller('PanelGroupController', panelGroupController);\r\n\r\n/* @ngInject */\r\nfunction akPanelGroup () {\r\n\treturn {\r\n\t\trestrict: 'EA',\r\n\t\treplace: true,\r\n\t\ttransclude: true,\r\n\t\ttemplate: '<div></div>',\r\n\t\tcontroller: 'PanelGroupController',\r\n\t\tscope: {\r\n\t\t\tname: '@',\r\n\t\t\tspeed: '=',\r\n\t\t\tthreshold: '=',\r\n\t\t\tfullWindow: '=',\r\n\t\t\tkeyboard: '=',\r\n\t\t\tprevKey: '=',\r\n\t\t\tnextKey: '='\r\n\t\t},\r\n\t\tlink: function (scope, element, attrs, ctrl, transcludeFn) {\r\n\t\t\ttranscludeFn(scope, function (clone) {\r\n\t\t\t\telement.append(clone);\r\n\t\t\t});\r\n\r\n\t\t\tscope.init();\t// Call init after child panels have registered with the controller\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/* @ngInject */\r\nfunction panelGroupController ($scope, $element, $attrs, $window, $timeout, $document, $rootScope, $log) {\r\n\tvar ctrl = this;\r\n\r\n\tvar resizeTimeout;\r\n\tvar scrollTimeout;\r\n\r\n\tctrl.panels = [];\r\n\r\n\tctrl.currentPanel = 0;\r\n\tctrl.scrollInterval = 0;\r\n\tctrl.scrollOffset = 0;\r\n\tctrl.isSnapping = false;\r\n\tctrl.enabled = true;\r\n\r\n\tctrl.speed = 400;\t\t// default snap animation duration in milliseconds\r\n\tctrl.threshold = 50;\t// default pixel threshold for snap to occur in pixels\r\n\tctrl.prevKey = 38;\t\t// default prevKey key code - up arrow\r\n\tctrl.nextKey = 40;\t\t// default nextKey key code - down arrow\r\n\r\n\t/*\r\n\t * add a panels scope to the panels array\r\n\t * - attached to `this` so it can be called from child panel directives\r\n\t */\r\n\tctrl.addPanel = function (panelScope) {\r\n\t\tvar panelName = angular.isDefined(panelScope.name) ? panelScope.name : 'Panel ' + (ctrl.panels.length + 1);\r\n\t\tctrl.panels.push(panelScope);\r\n\t\tif (angular.isDefined($scope.name)) {\r\n\t\t\t$rootScope.$emit('panelsnap:addedPanel', { group: $scope.name, name: panelName, id: ctrl.panels.length-1 });\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t * enable snapping\r\n\t */\r\n\t$scope.enableSnap = function () {\r\n\t\t// TODO: should this snap to closest panel when enabled?\r\n\t\tctrl.enabled = true;\r\n\t};\r\n\r\n\t/*\r\n\t * disable snapping\r\n\t */\r\n\t$scope.disableSnap = function () {\r\n\t\tctrl.enabled = false;\r\n\t};\r\n\r\n\t/*\r\n\t * toggle snapping\r\n\t */\r\n\t$scope.toggleSnap = function () {\r\n\t\tctrl.enabled = !ctrl.enabled;\r\n\t};\r\n\r\n\t/*\r\n\t * initialise the controller state\r\n\t * - called from the directive link function. This ensures it is called after any child panels\r\n\t *  link function has called addPanel and therefore the panels array is filled and valid.\r\n\t */\r\n\t$scope.init = function () {\r\n\t\tctrl.container = $element;\r\n\t\tctrl.eventContainer = ctrl.container;\r\n\t\tctrl.snapContainer = ctrl.container;\r\n\r\n\t\t// if full window, bind and snap using document instead of element\r\n\t\tif ($scope.fullWindow) {\r\n\t\t\tctrl.container = angular.element($document[0].documentElement);\r\n\t\t\tctrl.eventContainer = ctrl.snapContainer = $document;\r\n\t\t}\r\n\r\n\t\t// set options / variables\r\n\t\tctrl.scrollInterval = isNaN(ctrl.container[0].innerHeight) ? ctrl.container[0].clientHeight : ctrl.container[0].innerHeight;\r\n\t\tctrl.speed = angular.isDefined($scope.speed) ? $scope.speed : ctrl.speed;\r\n\t\tctrl.threshold = angular.isDefined($scope.threshold) ? $scope.threshold : ctrl.threshold;\r\n\t\tctrl.prevKey = angular.isDefined($scope.prevKey) ? $scope.prevKey : ctrl.prevKey;\r\n\t\tctrl.nextKey = angular.isDefined($scope.nextKey) ? $scope.nextKey : ctrl.nextKey;\r\n\r\n\t\tbind();\r\n\t\tactivatePanel(ctrl.currentPanel);\r\n\t};\r\n\r\n\t/*\r\n\t * listen for selectPanel event, if group name matches then snap\r\n\t * to the target panel\r\n\t */\r\n\t$rootScope.$on('panelsnap:selectPanel', function (event, data) {\r\n\t\tif ($scope.name === data.group) {\r\n\t\t\tevent.stopPropagation();\r\n\t\t\tsnapToPanel(data.id);\r\n\t\t}\r\n\t});\r\n\r\n\tfunction bind() {\r\n\t\t// bind scrolling events\r\n\t\tctrl.eventContainer.on('mousewheel scroll touchmove', scrollFn);\r\n\r\n\t\t// bind resize event\r\n\t\tangular.element($window).on('resize', resize);\r\n\r\n\t\t// bind keyboard events\r\n\t\tif ($scope.keyboard) {\r\n\t\t\tangular.element($window).on('keydown', keydown);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction keydown(e) {\r\n\t\tif (!ctrl.enabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// prevent any keypress events while snapping\r\n\t\tif (ctrl.isSnapping) {\r\n\t\t\tif (e.which === ctrl.prevKey || e.which === ctrl.nextKey) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\t$log.log('keypress prevented');\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tswitch (e.which) {\r\n\t\t\tcase ctrl.prevKey:\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tsnapToPanel(ctrl.currentPanel - 1);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ctrl.nextKey:\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tsnapToPanel(ctrl.currentPanel + 1);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction scrollFn(e) {\r\n\t\tvar threshold = 50;\r\n\t\t$timeout.cancel(scrollTimeout);\r\n\t\tscrollTimeout = $timeout(function () {\r\n\t\t\tscrollStop(e);\r\n\t\t}, threshold);\r\n\t}\r\n\r\n\tfunction resize() {\r\n\t\tvar threshold = 150;\r\n\t\t$timeout.cancel(resizeTimeout);\r\n\t\tresizeTimeout = $timeout(function () {\r\n\t\t\tctrl.scrollInterval = isNaN(ctrl.container[0].innerHeight) ? ctrl.container[0].clientHeight : ctrl.container[0].innerHeight;\r\n\t\t\t\r\n\t\t\tif (!ctrl.enabled) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// snap back to current panel after resizing\r\n\t\t\tsnapToPanel(ctrl.currentPanel);\r\n\t\t}, threshold);\r\n\t}\r\n\r\n\tfunction scrollStop(e) {\r\n\t\te.stopPropagation();\r\n\r\n\t\t// if (ctrl.isMouseDown) {\r\n\t\t// \treturn;\r\n\t\t// }\r\n\r\n\t\tif (ctrl.isSnapping) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar target;\r\n\t\tvar offset = ctrl.snapContainer.scrollTop();\r\n\r\n\t\tif (!ctrl.enabled) {\r\n\t\t\t// still want to activate the correct panel even if snapping is disabled\r\n\t\t\ttarget = Math.max(0, Math.min(Math.round(offset / ctrl.scrollInterval), ctrl.panels.length - 1));\r\n\t\t\tif (target !== ctrl.currentPanel) {\r\n\t\t\t\tactivatePanel(target);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar scrollDifference = offset - ctrl.scrollOffset;\r\n\t\tvar maxOffset = ctrl.container[0].scrollHeight - ctrl.scrollInterval;\r\n\r\n\t\t// determine target panel\r\n\t\tif (scrollDifference < -ctrl.threshold && scrollDifference > -ctrl.scrollInterval) {\r\n\t\t\ttarget = Math.floor(offset / ctrl.scrollInterval);\r\n\t\t} else if (scrollDifference > ctrl.threshold && scrollDifference < ctrl.scrollInterval) {\r\n\t\t\ttarget = Math.ceil(offset / ctrl.scrollInterval);\r\n\t\t} else {\r\n\t\t\ttarget = Math.round(offset / ctrl.scrollInterval);\r\n\t\t}\r\n\r\n\t\t// ensure target is within panel array bounds\r\n\t\ttarget = Math.max(0, Math.min(target, ctrl.panels.length - 1));\r\n\r\n\t\tif (scrollDifference === 0) {\r\n\t\t\t// Do nothing\r\n\t\t} else if (offset <= 0 || offset >= maxOffset) {\r\n\t\t\t// only activate to prevent stuttering\r\n\t\t\tactivatePanel(target);\r\n\t\t\t// set a scrollOffset to a sane number for next scroll\r\n\t\t\tctrl.scrollOffset = offset <= 0 ? 0 : maxOffset;\r\n\t\t} else {\r\n\t\t\tsnapToPanel(target);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction snapToPanel(target) {\r\n\t\tif (isNaN(target) || target < 0 || target >= ctrl.panels.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctrl.isSnapping = true;\r\n\r\n\t\t$rootScope.$broadcast('panelsnap:start', { group: $scope.name });\r\n\t\tctrl.panels[ctrl.currentPanel].onLeave();\r\n\r\n\t\tvar scrollTarget = ctrl.scrollInterval * target;\r\n\t\tctrl.snapContainer.scrollTo(0, scrollTarget, ctrl.speed).then(function () {\r\n\t\t\tctrl.scrollOffset = scrollTarget;\r\n\t\t\tctrl.isSnapping = false;\r\n\r\n\t\t\t$rootScope.$broadcast('panelsnap:finish', { group: $scope.name });\r\n\t\t\tctrl.panels[target].onEnter();\r\n\r\n\t\t\tactivatePanel(target);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction activatePanel(target) {\r\n\t\tangular.forEach(ctrl.panels, function (panel) {\r\n\t\t\tpanel.setActive(false);\r\n\t\t});\r\n\t\tctrl.panels[target].setActive(true);\r\n\t\tctrl.currentPanel = target;\r\n\r\n\t\t// TODO: call onActivate function for target\r\n\t\t$rootScope.$broadcast('panelsnap:activate', {group: $scope.name });\r\n\t\t$rootScope.$emit('panelsnap:activatePanel', { group: $scope.name, id: target });\r\n\t}\r\n}\r\n\n\n})();\n\n","(function() {\n'use strict';\n\n/*\r\n * ak-panel directive\r\n *\r\n * Creates a panel inside an ak-panel-group directive. Must be a child of an ak-panel-group element.\r\n *\r\n * @attribute name (optional) String: name of panel, will form text of nav element in any ak-panel-group-menu's assocaited with the containing group\r\n * @attribute onEnter (optional) Function: function to be called when panel is snapped into\r\n * @attribute onLeave (optional) Function: function to be called when panel is snapped out of\r\n */\r\nangular\r\n\t.module('akreitals.panel-snap')\r\n\t.directive('akPanel', akPanel);\r\n\r\n/* @ngInject */\r\nfunction akPanel () {\r\n\treturn {\r\n\t\trestrict: 'EA',\r\n\t\trequire: '^akPanelGroup',\r\n\t\treplace: true,\r\n\t\ttransclude: true,\r\n\t\tscope: {\r\n\t\t\tname: '@',\r\n\t\t\tonEnter: '&',\r\n\t\t\tonLeave: '&'\r\n\t\t},\r\n\t\ttemplate: '<div class=\"ak-panel\" ng-class=\"{active: active}\"></div>',\r\n\t\tlink: function (scope, element, attrs, ctrl, transcludeFn) {\r\n\r\n\t\t\t// translude manually to avoid sibling scope between transclude scope and controller scope if applicable\r\n\t\t\ttranscludeFn(scope.$parent, function (clone) {\r\n\t\t\t\telement.append(clone);\r\n\t\t\t});\r\n\r\n\t\t\t// add to parent ak-panel-group\r\n\t\t\tctrl.addPanel(scope);\r\n\r\n\t\t\t// default panel styles\r\n\t\t\telement.css({\r\n\t\t\t\t'width': '100%',\r\n\t\t\t\t'height': '100%',\r\n\t\t\t\t'position': 'relative',\r\n\t\t\t\t'overflow': 'hidden'\r\n\t\t\t});\r\n\r\n\t\t\t// active flag and getter function, to set class .active on panel\r\n\t\t\tscope.active = false;\r\n\t\t\tscope.setActive = function (active) {\r\n\t\t\t\tscope.active = active;\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}\n\n})();\n\n","(function() {\n'use strict';\n\n/*\r\n * Scroll methods - removes the need for external jQuery or GreenSock libraries\r\n *\r\n * Adapted from durated's Angular Scroll module\r\n * https://github.com/durated/angular-scroll\r\n */\r\nangular\r\n\t.module('akreitals.panel-snap')\r\n\t.value('scrollEasing', scrollEasing)\r\n\t.run(runFn)\r\n\t.factory('polyfill', polyfill)\r\n\t.factory('requestAnimation', requestAnimation)\r\n\t.factory('cancelAnimation', cancelAnimation);\r\n\r\nfunction scrollEasing (x) {\r\n\tif(x < 0.5) {\r\n\t\treturn Math.pow(x*2, 2)/2;\r\n\t}\r\n\treturn 1-Math.pow((1-x)*2, 2)/2;\r\n}\r\n\r\n/* @ngInject */\r\nfunction runFn ($window, $q, cancelAnimation, requestAnimation, scrollEasing) {\r\n\tvar proto = angular.element.prototype;\r\n\r\n\tvar isDocument = function(el) {\r\n\t\treturn (typeof HTMLDocument !== 'undefined' && el instanceof HTMLDocument) || (el.nodeType && el.nodeType === el.DOCUMENT_NODE);\r\n\t};\r\n\r\n\tvar isElement = function(el) {\r\n\t\treturn (typeof HTMLElement !== 'undefined' && el instanceof HTMLElement) || (el.nodeType && el.nodeType === el.ELEMENT_NODE);\r\n\t};\r\n\r\n\tvar unwrap = function(el) {\r\n\t\treturn isElement(el) || isDocument(el) ? el : el[0];\r\n\t};\r\n\r\n\tproto.scrollTo = function(left, top, duration) {\r\n\t\tvar aliasFn;\r\n\t\tif(angular.isElement(left)) {\r\n\t\t\taliasFn = this.scrollToElement;\r\n\t\t} else if(duration) {\r\n\t\t\taliasFn = this.scrollToAnimated;\r\n\t\t}\r\n\t\tif(aliasFn) {\r\n\t\t\treturn aliasFn.apply(this, arguments);\r\n\t\t}\r\n\t\tvar el = unwrap(this);\r\n\t\tif(isDocument(el)) {\r\n\t\t\treturn $window.scrollTo(left, top);\r\n\t\t}\r\n\t\tel.scrollLeft = left;\r\n\t\tel.scrollTop = top;\r\n\t};\r\n\r\n\tproto.scrollToAnimated = function(left, top, duration, easing) {\r\n\t\tvar scrollAnimation, deferred;\r\n\t\tif(duration && !easing) {\r\n\t\t\teasing = scrollEasing;\r\n\t\t}\r\n\t\tvar startLeft = this.scrollLeft(),\r\n\t\t\tstartTop = this.scrollTop(),\r\n\t\t\tdeltaLeft = Math.round(left - startLeft),\r\n\t\t\tdeltaTop = Math.round(top - startTop);\r\n\r\n\t\tvar startTime = null;\r\n\t\tvar el = this;\r\n\r\n\t\tvar cancelOnEvents = 'scroll mousedown mousewheel touchmove keydown';\r\n\t\tvar cancelScrollAnimation = function($event) {\r\n\t\t\tif (!$event || $event.which > 0) {\r\n\t\t\t\tel.unbind(cancelOnEvents, cancelScrollAnimation);\r\n\t\t\t\tcancelAnimation(scrollAnimation);\r\n\t\t\t\tdeferred.reject();\r\n\t\t\t\tscrollAnimation = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(scrollAnimation) {\r\n\t\t\tcancelScrollAnimation();\r\n\t\t}\r\n\t\tdeferred = $q.defer();\r\n\r\n\t\tif(!deltaLeft && !deltaTop) {\r\n\t\t\tdeferred.resolve();\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\r\n\t\tvar animationStep = function(timestamp) {\r\n\t\t\tif (startTime === null) {\r\n\t\t\t\tstartTime = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tvar progress = timestamp - startTime;\r\n\t\t\tvar percent = (progress >= duration ? 1 : easing(progress/duration));\r\n\r\n\t\t\tel.scrollTo(\r\n\t\t\t\tstartLeft + Math.ceil(deltaLeft * percent),\r\n\t\t\t\tstartTop + Math.ceil(deltaTop * percent)\r\n\t\t\t);\r\n\t\t\tif(percent < 1) {\r\n\t\t\t\tscrollAnimation = requestAnimation(animationStep);\r\n\t\t\t} else {\r\n\t\t\t\tel.unbind(cancelOnEvents, cancelScrollAnimation);\r\n\t\t\t\tscrollAnimation = null;\r\n\t\t\t\tdeferred.resolve();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//Fix random mobile safari bug when scrolling to top by hitting status bar\r\n\t\tel.scrollTo(startLeft, startTop);\r\n\r\n\t\t// el.bind(cancelOnEvents, cancelScrollAnimation);\r\n\r\n\t\tscrollAnimation = requestAnimation(animationStep);\r\n\t\treturn deferred.promise;\r\n\t};\r\n\r\n\tproto.scrollToElement = function(target, offset, duration, easing) {\r\n\t\tvar el = unwrap(this);\r\n\t\tvar top = this.scrollTop() + unwrap(target).getBoundingClientRect().top - (offset || 0);\r\n\t\tif(isElement(el)) {\r\n\t\t\ttop -= el.getBoundingClientRect().top;\r\n\t\t}\r\n\t\treturn this.scrollTo(0, top, duration, easing);\r\n\t};\r\n\r\n\tvar overloaders = {\r\n\t\tscrollLeft: function(value, duration, easing) {\r\n\t\t\tif(angular.isNumber(value)) {\r\n\t\t\t\treturn this.scrollTo(value, this.scrollTop(), duration, easing);\r\n\t\t\t}\r\n\t\t\tvar el = unwrap(this);\r\n\t\t\tif(isDocument(el)) {\r\n\t\t\t\treturn $window.scrollX || document.documentElement.scrollLeft || document.body.scrollLeft;\r\n\t\t\t}\r\n\t\t\treturn el.scrollLeft;\r\n\t\t},\r\n\t\tscrollTop: function(value, duration, easing) {\r\n\t\t\tif(angular.isNumber(value)) {\r\n\t\t\t\treturn this.scrollTo(this.scrollTop(), value, duration, easing);\r\n\t\t\t}\r\n\t\t\tvar el = unwrap(this);\r\n\t\t\tif(isDocument(el)) {\r\n\t\t\t\treturn $window.scrollY || document.documentElement.scrollTop || document.body.scrollTop;\r\n\t\t\t}\r\n\t\t\treturn el.scrollTop;\r\n\t\t}\r\n\t};\r\n\r\n\t//Add duration and easing functionality to existing jQuery getter/setters\r\n\tvar overloadScrollPos = function(superFn, overloadFn) {\r\n\t\treturn function(value, duration) {\r\n\t\t\tif(duration) {\r\n\t\t\t\treturn overloadFn.apply(this, arguments);\r\n\t\t\t}\r\n\t\t\treturn superFn.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\tfor(var methodName in overloaders) {\r\n\t\tproto[methodName] = (proto[methodName] ? overloadScrollPos(proto[methodName], overloaders[methodName]) : overloaders[methodName]);\r\n\t}\r\n}\r\n\r\n/* @ngInject */\r\nfunction polyfill ($window) {\r\n\tvar vendors = ['webkit', 'moz', 'o', 'ms'];\r\n\r\n\treturn function(fnName, fallback) {\r\n\t\tif($window[fnName]) {\r\n\t\t\treturn $window[fnName];\r\n\t\t}\r\n\t\tvar suffix = fnName.substr(0, 1).toUpperCase() + fnName.substr(1);\r\n\t\tfor(var key, i = 0; i < vendors.length; i++) {\r\n\t\t\tkey = vendors[i]+suffix;\r\n\t\t\tif($window[key]) {\r\n\t\t\t\treturn $window[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fallback;\r\n\t};\r\n}\r\n\r\n/* @ngInject */\r\nfunction requestAnimation (polyfill, $timeout) {\r\n\tvar lastTime = 0;\r\n\tvar fallback = function(callback) {\r\n\t\tvar currTime = new Date().getTime();\r\n\t\tvar timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n\t\tvar id = $timeout(function() {\r\n\t\t\tcallback(currTime + timeToCall);\r\n\t\t}, timeToCall);\r\n\t\tlastTime = currTime + timeToCall;\r\n\t\treturn id;\r\n\t};\r\n\r\n\treturn polyfill('requestAnimationFrame', fallback);\r\n}\r\n\r\n/* @ngInject */\r\nfunction cancelAnimation (polyfill, $timeout) {\r\n\tvar fallback = function(promise) {\r\n\t\t$timeout.cancel(promise);\r\n\t};\r\n\r\n\treturn polyfill('cancelAnimationFrame', fallback);\r\n}\n\n})();\n\n"],"sourceRoot":"/source/"}